const fs = require('fs').promises;
const path = require('path');
const client = require('discord.js');
const { log } = require('console');

const DATA_PATH = path.join(__dirname, '../db/data.json');

//log rotation

const MAX_LOG_SIZE = 1024 * 1024 * 5; // 5MB
const LOG_PATH = path.join(__dirname, '../logs/logs.txt');
try {
    const stats = fs.stat(LOG_PATH);
    if (stats.size > MAX_LOG_SIZE) {
        fs.rename(LOG_PATH, LOG_PATH + '.old');
    }
} catch (error) {
    if (error.code !== 'ENOENT') console.error('Log rotation check failed:', error);
}

module.exports = {
    name: 'messageCreate',
    once: false,
    
    async execute(message) {
        if (message.author.bot) return;
        
        const input = message.content;
        const pattern = 'aba';
        const userId = message.author.id;
        const username = message.author.tag;
        const timestamp = new Date().toISOString();

        // Count pattern occurrences
        const matches = input.match(new RegExp(pattern, 'g')) || [];
        const count = matches.length;
        if (count === 0) return;

        // Get positions
        const positions = [];
        let index = input.indexOf(pattern);
        while (index !== -1) {
            positions.push(index);
            index = input.indexOf(pattern, index + 1);
        }

        try {
            // Read or initialize data
            let data = [];
            try {
                const fileContent = await fs.readFile(DATA_PATH, 'utf-8');
                data = JSON.parse(fileContent);
            } catch (error) {
                if (error.code !== 'ENOENT') throw error;
            }

            // Find existing user entry
            const userIndex = data.findIndex(entry => entry.userid === userId);
            
            if (userIndex !== -1) {
                // Update existing entry
                data[userIndex] = {
                    ...data[userIndex],
                    timestamp,
                    input,
                    count: data[userIndex].count + count,
                };
            } else {
                // Create new entry
                data.push({
                    user: username,
                    userid: userId,
                    timestamp,
                    input,
                    pattern,
                    count,
                });
            }

            // Save updated data
            await fs.writeFile(DATA_PATH, JSON.stringify(data, null, 2));

            // Send response
                const logEntry = 
                    `${timestamp} - ${username} (${userId})\n` +
                    `Updated ${username}'s points\n` +
                    `This message: + ${count} points\n` +
                    `-------------------------------------------\n`
                await fs.appendFile((path.join(__dirname, '../logs/logs.txt')), logEntry, 'utf-8');   
                 
        } catch (error) {
            console.error('Error processing message:', error);
            if (message.guild) {
                await console.error('Error updating your data, please try again later or contact support.');
            }
        }
    }
};